using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;
using UnityEngine.InputSystem;

public class BattleManager : MonoBehaviour, IManager
{
    /*
     * This class is in charge of the entire battle system.
     * Um. We'll figure this out later...
     * This will be fun :) -Sheep
     */

    public GameState gameState;
    public DungeonManager dungeonManager;
    public BattleGUI GUI;

    public RunStats runStats;


    public delegate void uiUpdate(string[] stats);
    public static event uiUpdate uiBattleUpdate;
    // take data from runStats for player information?
    // public RunStats runStats;
    
    /*
     * Battle State
     */

    bool battleActive = false;
    bool playerTurn = true;
    private MapTile mapTile;
    private EnemyType enemyType;
    private GameObject enemyRef;

    // audio
    public AudioSource deathSound;

    /*
     * Battle Requesting
     */

    void Awake()
    {
        MapTile.StartBattle += EngageBattle;
        deathSound = GetComponent<AudioSource>();
    }

    void EngageBattle(MapTile mapTile, EnemyType enemyType)
    {
        // 'this' keyword for clarity when passing different variables of same name around
        this.mapTile = mapTile;
        this.enemyType = enemyType;
        enemyRef = this.mapTile.referenceEnemyObject();
        enemyRef.GetComponentInChildren<MeshRenderer>().material.color = Color.cyan;
        gameState.RequestManager(this);
    }

    /*
     * Battle Input
     */
    private void Update()
    {
        if (!battleActive) return;

        // use the string array generated by getBattleText to update the UI in BattleGUI
        
        if (!playerTurn){
            DamagePlayer(1);
            playerTurn = true;
        }
        
        
        
        uiBattleUpdate(getBattleText());

        // if input is a damaging move->
        //     call DamageEnemy()

        // if (Input.GetKeyDown(KeyCode.Space))
        // {
        //     WinBattle();
        // }
    }

    private void WinBattle()
    {
        // play enemy death sound
        deathSound.Play();
        runStats.playerStats.gainExp(mapTile.referenceEnemyType());
        playerTurn = true;
        mapTile.ClearEnemy();
        gameState.RequestManager(dungeonManager);
    }

    /*
     * Battle Effects
     */
    public void DamageEnemy(int dmg)
    {
        enemyRef.GetComponent<DungeonEnemy>().loseHP(dmg);
        if (enemyRef.GetComponent<DungeonEnemy>().getHP() <= 0)
        {
            WinBattle();
        }
        playerTurn = false;
    }

    public void DamagePlayer(int dmg){
        runStats.playerStats.loseHP(dmg);
    }


    public string[] getBattleText(){
        // returns an array of strings, each one associated to specific data to update in BattleGUI

        // DungeonEnemy is the reference to the enemy object, and EnemyBattleEntityStats holds a reference to it's battle data
        /*
        string[] battleText = {"Enemy HP: " + enemyRef.GetComponent<DungeonEnemy>().getHP().ToString(), 
                                "Enemy Maximum HP: " + enemyRef.GetComponent<EnemyBattleEntityStats>().health.ToString(), // TODO: fix bug causing unwanted newline here
                                "",
                                "", 
                                "\t\t\t  Your turn! \n \t\t    (Select a Move)"};
        */ 
        string[] battleText = {
            runStats.playerStats.lives.ToString(),
            runStats.playerStats.maxBalance.ToString(),
            runStats.playerStats.currentBalance.ToString(),
            runStats.playerStats.level.ToString(),
            runStats.playerStats.currentExp.ToString(),
            runStats.playerStats.maxExp.ToString(),
            "Enemy HP:" + enemyRef.GetComponent<DungeonEnemy>().getHP().ToString(),
                                
                                };
        // string[] battleText = {"Enemy HP: " + enemyRef.GetComponent<DungeonEnemy>().getHP().ToString(), 
        //                         "",  
        //                         "",
        //                         "", 
        //                         "\t\t\t  Your turn! \n \t\t    (Select a Move)"};
        return battleText;
    }
    /*
     * IManager Transitions
     */

    public void StartManager()
    {
        battleActive = true;
        GUI.EnableGUI();
    }

    public void StopManager()
    {
        battleActive = false;
        GUI.DisableGUI();
    }

    public ManagerType GetManagerType()
    {
        return ManagerType.BATTLE;
    }

}
